<stmt> ->
	<select-stmt> |
	<insert-stmt> |
	<update-stmt> |
	<delete-stmt>

<select-stmt> ->
	<select-stmt-core>
	["order" "by" <ordered-expr>+{","}]
	["limit" <expr> ["offset" <expr>]]

<select-stmt-core> ->
	<compound-select-stmt-core> |
	<simple-select-stmt-core> |
	<values-statement>

<compound-select-stmt-core> ->
	<select-stmt-core> <union-operator> <select-stmt-core>

<union-operator> ->
	"union" ["all"]

<simple-select-stmt-core> ->
	"select" ["distinct" | "all"] <col-expr>+{","}
	["from" <from-expr>]
	["where" <expr>]
	["group" "by" <expr>+{","} ["having" <expr>] ]

<values-statement> ->
	"values" ("(" <expr>+{","} ")")+{","}

<col-expr> ->
	<simple-col-expr> |
	<wildcard-col-expr>

<simple-col-expr> ->
	<expr> ["as" <identifier>]

<wildcard-col-expr> ->
	[<identifier> "."] "*"

<from-expr> ->
	<join-expr> |
	<table-expr> |
	<select-expr-in-from> |
	"(" <from-expr> ")"

<join-expr> ->
	<from-expr> <join-operator> <from-expr> [<join-constraint>]

<join-constraint> ->
	<on-constraint> |
	<using-constraint>

<on-constraint> ->
	"on" <expr>

<using-constraint> ->
	"using" "(" <identifier>+{","} ")"

<join-operator> ->
	"," |
	[
		"inner" | "left" ["outer"] | "right" ["outer"] |
		"full" ["outer"] | "cross"
	] "join"

<table-expr> ->
	<table-ref> ["as" <identifier>]

<table-ref> ->
	[<identifier> "."] <identifier>

<select-expr-in-from> ->
	<select-expr>

<select-expr> ->
	"(" <select-stmt> ")" [ ["as"] <identifier> ]

<ordered-expr> ->
	<expr> ["asc" | "desc"]

<expr> ->
	<atomic-expr> |
	<collate-expr> |
	<unary-expr> |
	<binary-expr> |
	<in-expr> |
	<like-expr> |
	<between-expr> |
	<case-expr>

<atomic-expr> ->
	<literal-expr> |
	<col-ref> |
	<placeholder> |
	<function-call> |
	<cast-expr> |
	<exists-expr> |
	<select-expr>

<literal-expr> ->
	<integer-literal> |
	<real-literal> |
	<string-literal> |
	<null-literal>

<null-literal> ->
	"null"

<col-ref> ->
	[<table-ref> "."] <identifier>

<placeholder> ->
	<anonymous-placeholder> |
	<named-placeholder>

<anonymous-placeholder> ->
	"?"

<named-placeholder> ->
	":<name>"

<function-call> ->
	<function-name> "(" ["*" | ["distinct"] <expr>+{","}] ")"

<function-name> ->
	???

<cast-expr> ->
	"cast" "(" <expr> "as" <type> ")"

<type> ->
	<type-name>
	["character" "set" <character-set-name>]
	["collate" <collation-name>]

<type-name> ->
	???

<exists-expr> ->
	"exists" "(" <select-stmt> ")"

<collate-expr> ->
	<expr> "collate" <collation-name>

<collation-name> ->
	"binary" | ???

<character-set-name> ->
	???

<negation-expr> ->
	"-" <expr>

<unary-expr> ->
	<negation-expr> |
	<not-expr>

<binary-expr> ->
	<concat-expr> |
	<mul-expr> |
	<div-expr> |
	<mod-expr> |
	<add-expr> |
	<sub-expr> |
	<lt-expr> |
	<le-expr> |
	<gt-expr> |
	<ge-expr> |
	<eq-expr> |
	<ne-expr> |
	<is-expr> |
	<and-expr> |
	<or-expr>

<concat-expr> ->
	<expr> "||" <expr>

<mul-expr> ->
	<expr> "*" <expr>

<div-expr> ->
	<expr> "/" <expr>

<add-expr> ->
	<expr> "+" <expr>

<sub-expr> ->
	<expr> "-" <expr>

<lt-expr> ->
	<expr> "<" <expr>

<le-expr> ->
	<expr> "<=" <expr>

<gt-expr> ->
	<expr> ">" <expr>

<ge-expr> ->
	<expr> ">=" <expr>

<eq-expr> ->
	<expr> "=" <expr>

<ne-expr> ->
	<expr> "!=" <expr>

<is-expr> ->
	<expr> "is" <expr>

<in-expr> ->
	<expr> "in" <in-list>

<in-list> ->
	<simple-in-list> |
	<select-in-list> |
	<table-in-list>

<simple-in-list> ->
	"(" <select-stmt> ")"

<select-in-list> ->
	"(" <expr>+{","} ")"

<table-in-list> ->
	<table-ref>

<like-expr> ->
	<expr> "like" <expr> ["escape" <expr>]

<not-expr> ->
	"not" <expr>

<and-expr> ->
	<expr> "and" <expr>

<or-expr> ->
	<expr> "or" <expr>

<between-expr> ->
	<expr> "between" <expr> "and" <expr>

<case-expr> ->
	"case" [<expr>] <when-clause>+ ["else" <expr>] "end"

<when-clause> ->
	"when" <expr> "then" <expr>

<insert-statement> ->
	<insert-type> "into" <table-projection>
	(<select-statement> | "default" "values")

<insert-type> ->
	"insert" |
	"replace" |
	"insert" "or" "replace" |
	"insert" "or" "ignore"

<table-projection> ->
	<table-ref> "(" <col-ref>+{","} ")"

<update-stmt> ->
	<update-type> <table-ref>
	"set" (<identifier> "=" <expr>)+{","}
	["where" <expr>]
	["order" "by" <ordered-expr>+{","}]
	["limit" <expr> ["offset" <expr>]]

<delete-stmt> ->
	"delete" "from" <table-ref> ["where" <expr>]

<create-table-stmt> ->
	"create" ["temporary"] "table" ["if" "not" "exists"]
	<table-ref> "("
	<column-definition>+{","}
	("," <table-constraint>)*
	")"
	<table-modifier>*{","}

<table-modifier> ->
	???

<column-definition> ->
	<identifier> <type>
	[<collate-clause>]
	[<not-null-clause>]
	[<default-value-clause>]
	[<autoincrement-clause>]
	[<key-clause>]
	[<foreign-key-clause>]

<not-null-clause> ->
	"not" "null"

<default-value-clause> ->
	"default" ( <literal-expr> | "(" <expr> ")" )

<autoincrement-clause> ->
	"autoincrement" (SQLite) / "auto_increment" (MySQL)

<key-clause> ->
	<primary-key-clause> |
	<unique-clause>

<primary-key-clause> ->
	"primary" "key"

<unique-clause> ->
	"unique"

<table-constraint> ->
	<primary-key-constraint> |
	<index-constraint> |
	<unique-constraint> |
	<foreign-key-constraint> |
	<check-constraint>

<primary-key-constraint> ->
	["constraint" <identifier>] "primary" "key" "(" <identifier>+{","} ")"

<index-constraint> ->
	"index" [<identifier>] "(" <identifier>+{","} ")"

<unique-constraint> ->
	["constraint" <identifier>] "unique" "(" <identifier>+{","} ")"

<foreign-key-constraint> ->
	["constraint" <identifier>] "foreign" "key" "(" <identifier>+{","} ")" <foreign-key-clause>

<check-constraint> ->
	"check" "(" <expr> ")"

<foreign-key-clause> ->
	"references" <table-ref>
	["(" <identifier>+{","} ")"]
	["on" "delete" <foreign-key-trigger-name>]
	["on" "update" <foreign-key-trigger-name>]
	[
		["not"] "deferrable"
		["initially" ("deferred" | "immediate")]
	]

<foreign-key-trigger-name> ->
	"set" "null" |
	"cascade" |
	"restrict" |
	"no" "action"
