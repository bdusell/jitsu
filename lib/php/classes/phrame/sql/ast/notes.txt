<select-stmt> ->
	<select-stmt-core>
	["order" "by" <order-expr>+{","}]
	["limit" <expr> [("offset" | ",") <expr>] ]

<select-stmt-core> ->
	<compound-select-stmt-core> |
	<simple-select-stmt-core> |
	<values-stmt>

<compound-select-stmt-core> ->
	<select-stmt-core> <union-operator> <select-stmt-core>

<union-operator> ->
	"union" ["all"]

<simple-select-stmt-core> ->
	"select" ["distinct" | "all"] <col-expr>+{","}
	["from" <from-expr>]
	["where" <expr>]
	["group" "by" <expr>+{","} ["having" <expr>] ]

<values-stmt> ->
	"values" ("(" <expr>+{","} ")"){","}

<col-expr> ->
	<simple-col-expr> |
	<wildcard-col-expr>

<simple-col-expr> ->
	<expr> ["as" <identifier>]

<wildcard-col-expr> ->
	[<identifier> "."] "*"

<from-expr> ->
	<join-expr> |
	<table-expr> |
	<from-select-expr> |
	"(" <from-expr> ")"

<join-expr> ->
	<from-expr> <join-operator> <from-expr> [<join-constraint>]

<join-constraint> ->
	<on-constraint> |
	<using-constraint>

<on-constraint> ->
	"on" <expr>

<using-constraint> ->
	"using" "(" <identifier>+{","} ")"

<join-operator> ->
	"," |
	[
		"inner" | "left" ["outer"] | "right" ["outer"] |
		"full" ["outer"] | "cross"
	] "join"

<table-expr> ->
	<table-ref> ["as" <identifier>]

<table-ref> ->
	[<identifier> "."] <identifier>

<from-select-expr> ->
	<select-expr>

<select-expr> ->
	"(" <select-stmt> ")" [ ["as"] <identifier> ]

<order-expr> ->
	<expr> ["asc" | "desc"]

<collate-clause> ->
	"collate" <collation-name>

<expr> ->
	<integer-literal> |
	<real-literal> |
	<string-literal> |
	<null-literal> |
	<current-time> |
	<placeholder> |
	<col-ref> |
	<unary-op> |
	<binary-op> |
	<function-call> |
	<cast-expression> |
	<collated-expr> |
	<like-expr> |
	<null-check-expr> |
	<between-expr> |
	<in-expr> |
	<exists-expr> |
	<case-expr>

<null-literal> ->
	"null"

<current-time> ->
	???

<placeholder> ->
	<anonymous-placeholder> |
	<named-placeholder>

<anonymous-placeholder> ->
	"?"

<named-placeholder> ->
	":<name>"

<col-ref> ->
	[<table-ref> "."] <identifier>

<unary-op> ->
	["not" | "+" | "-" | "~"] <expr>

<binary-op> ->
	<expr> [
		"and" | "or"
		"=" | "!=" |
		"<" | ">" | "<=" | ">=" |
		"+" | "-" | "*" | "/" | "%" |
		"<<" | ">>" | "&" | "|" |
		"is" ["not"]
	] <expr>

<function-call> ->
	<identifier> "(" <arg-list> ")"

<arg-list> ->
	|
	["distinct"] <expr>+{","} |
	"*"

<cast-expression> ->
	"cast" "(" <expr> "as" <type-name> ")"

<type-name> ->
	???

<collated-expr> ->
	<expr> "collate" <collation-name>

<collation-name> ->
	"binary" | ???

<like-op> ->
	<expr> ["not"] (
		"like" | "glob" | "regexp" | "match"
	) <expr> ["escape" <expr>]

<null-check-expr> ->
	<expr> ("isnull" | "notnull" | "not" "null")

<between-expr> ->
	<expr> ["not"] "between" <expr> "and" <expr>

<in-expr> ->
	<expr> ["not"] "in" <in-list>

<in-list> ->
	"(" <select-stmt> ")" |
	<expr>+{","} |
	<table-ref>

<exists-expr> ->
	["not"] "exists" "(" <select-stmt> ")"

<case-expr> ->
	"case" [<expr>] ("when" <expr> "then" <expr>)+ ["else" <expr>] "end"

<insert-statement> ->
	<insert-type> "into" <table-projection>
	(<select-statement> | "default" "values")

<insert-type> ->
	"insert" |
	"replace" |
	"insert" "or" "replace" |
	"insert" "or" "ignore"

<table-projection> ->
	<table-ref> "(" <col-ref">+{","} ")"

<update-stmt> ->
	<update-type> <table-ref>
	"set" (<identifier> "=" <expr>)+{","}
	["where" <expr>]

<delete-stmt> ->
	"delete" "from" <table-ref> ["where" <expr>]

